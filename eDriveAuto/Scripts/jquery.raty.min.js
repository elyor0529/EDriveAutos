(function (a) { var b = { init: function (c) { return this.each(function () { var d = a.extend({}, a.fn.raty.defaults, c), e = a(this).data("options", d); if (d.number > 20) { d.number = 20 } else if (d.number < 0) { d.number = 0 } if (d.round.down === undefined) { d.round.down = a.fn.raty.defaults.round.down } if (d.round.full === undefined) { d.round.full = a.fn.raty.defaults.round.full } if (d.round.up === undefined) { d.round.up = a.fn.raty.defaults.round.up } if (d.path.substring(d.path.length - 1, d.path.length) != "/") { d.path += "/" } if (typeof d.start == "function") { d.start = d.start.call(this) } var f = !isNaN(parseInt(d.start, 10)), g = ""; if (f) { g = d.start > d.number ? d.number : d.start } var h = d.starOn, i = d.space ? 4 : 0, j = ""; for (var k = 1; k <= d.number; k++) { h = g < k ? d.starOff : d.starOn; j = k <= d.hintList.length && d.hintList[k - 1] !== null ? d.hintList[k - 1] : k; e.append('<img src="' + d.path + h + '" alt="' + k + '" title="' + j + '" />'); if (d.space) { e.append(k < d.number ? " " : "") } } var l = a("<input/>", { type: "hidden", name: d.scoreName }).appendTo(e); if (f) { if (d.start > 0) { l.val(g) } b.roundStar.call(e, g) } if (d.iconRange) { b.fillStar.call(e, g) } b.setTarget.call(e, g, d.targetKeep); var m = d.width || d.number * d.size + d.number * i; if (d.cancel) { var n = a('<img src="' + d.path + d.cancelOff + '" alt="x" title="' + d.cancelHint + '" class="raty-cancel"/>'); if (d.cancelPlace == "left") { e.prepend(" ").prepend(n) } else { e.append(" ").append(n) } m += d.size + i } if (d.readOnly) { b.fixHint.call(e); e.children(".raty-cancel").hide() } else { e.css("cursor", "pointer"); b.bindAction.call(e) } e.css("width", m) }) }, bindAction: function () { var c = this, d = this.data("options"), e = this.children("input"); c.mouseleave(function () { b.initialize.call(c, e.val()); b.setTarget.call(c, e.val(), d.targetKeep) }); var f = this.children("img").not(".raty-cancel"), g = d.half ? "mousemove" : "mouseover"; if (d.cancel) { c.children(".raty-cancel").mouseenter(function () { a(this).attr("src", d.path + d.cancelOn); f.attr("src", d.path + d.starOff); b.setTarget.call(c, null, true) }).mouseleave(function () { a(this).attr("src", d.path + d.cancelOff); c.mouseout() }).click(function (a) { e.removeAttr("value"); if (d.click) { d.click.call(c[0], null, a) } }) } f.bind(g, function (e) { var f = parseInt(this.alt, 10); if (d.half) { var g = parseFloat((e.pageX - a(this).offset().left) / d.size), h = g > .5 ? 1 : .5; f = parseFloat(this.alt) - 1 + h; b.fillStar.call(c, f); if (d.precision) { f = f - h + g } b.showHalf.call(c, f) } else { b.fillStar.call(c, f) } c.data("score", f); b.setTarget.call(c, f, true) }).click(function (a) { e.val(d.half || d.precision ? c.data("score") : this.alt); if (d.click) { d.click.call(c[0], e.val(), a) } }) }, cancel: function (c) { return this.each(function () { var d = a(this); if (d.data("readonly") == "readonly") { return false } if (c) { b.click.call(d, null) } else { b.start.call(d, null) } d.mouseleave().children("input").removeAttr("value") }) }, click: function (c) { return this.each(function () { var d = a(this); if (d.data("readonly") == "readonly") { return false } b.initialize.call(d, c); var e = d.data("options"); if (e.click) { e.click.call(d[0], c) } else { a.error('you must add the "click: function(score, evt) { }" callback.') } b.setTarget.call(d, c, true) }) }, fillStar: function (a) { var b = this.data("options"), c = this.children("img").not(".raty-cancel"), d = c.length, e = 0, f, g, h; for (var i = 1; i <= d; i++) { f = c.eq(i - 1); if (b.iconRange && b.iconRange.length > e) { g = b.iconRange[e]; if (b.single) { h = i == a ? g.on || b.starOn : g.off || b.starOff } else { h = i <= a ? g.on || b.starOn : g.off || b.starOff } if (i <= g.range) { f.attr("src", b.path + h) } if (i == g.range) { e++ } } else { if (b.single) { h = i == a ? b.starOn : b.starOff } else { h = i <= a ? b.starOn : b.starOff } f.attr("src", b.path + h) } } }, fixHint: function () { var a = this.data("options"), b = this.children("input"), c = parseInt(b.val(), 10), d = a.noRatedMsg; if (!isNaN(c) && c > 0) { d = c <= a.hintList.length && a.hintList[c - 1] !== null ? a.hintList[c - 1] : c } b.attr("readonly", "readonly"); this.css("cursor", "default").data("readonly", "readonly").attr("title", d).children("img").attr("title", d) }, readOnly: function (c) { return this.each(function () { var d = a(this), e = d.children(".raty-cancel"); if (e.length) { if (c) { e.hide() } else { e.show() } } if (c) { d.unbind(); d.children("img").unbind(); b.fixHint.call(d) } else { b.bindAction.call(d); b.unfixHint.call(d) } }) }, roundStar: function (a) { var b = this.data("options"), c = (a - Math.floor(a)).toFixed(2); if (c > b.round.down) { var d = b.starOn; if (c < b.round.up && b.halfShow) { d = b.starHalf } else if (c < b.round.full) { d = b.starOff } this.children("img").not(".raty-cancel").eq(Math.ceil(a) - 1).attr("src", b.path + d) } }, score: function () { var b = [], c; this.each(function () { c = a(this).children("input").val(); c = c == "" ? null : parseFloat(c); b.push(c) }); return b.length > 1 ? b : b[0] }, setTarget: function (b, c) { var d = this.data("options"); if (d.target) { var e = a(d.target); if (e.length == 0) { a.error("target selector invalid or missing!") } else { var f = b; if (f == null && !d.cancel) { a.error('you must enable the "cancel" option to set hint on target.') } else { if (!c || f == "") { f = d.targetText } else { if (d.targetType == "hint") { if (f === null && d.cancel) { f = d.cancelHint } else { f = d.hintList[Math.ceil(f - 1)] } } else { if (f != "" && !d.precision) { f = parseInt(f, 10) } else { f = parseFloat(f).toFixed(1) } } } if (d.targetFormat.indexOf("{score}") < 0) { a.error('template "{score}" missing!') } else if (b !== null) { f = d.targetFormat.toString().replace("{score}", f) } if (e.is(":input")) { e.val(f) } else { e.html(f) } } } } }, showHalf: function (a) { var b = this.data("options"), c = (a - Math.floor(a)).toFixed(1); if (c > 0 && c < .6) { this.children("img").not(".raty-cancel").eq(Math.ceil(a) - 1).attr("src", b.path + b.starHalf) } }, start: function (c) { return this.each(function () { var d = a(this); if (d.data("readonly") == "readonly") { return false } b.initialize.call(d, c); var e = d.data("options"); b.setTarget.call(d, c, true) }) }, initialize: function (a) { var c = this.data("options"); if (a < 0) { a = 0 } else if (a > c.number) { a = c.number } b.fillStar.call(this, a); if (a != "") { if (c.halfShow) { b.roundStar.call(this, a) } this.children("input").val(a) } }, unfixHint: function () { var a = this.data("options"), b = this.children("img").filter(":not(.raty-cancel)"); for (var c = 0; c < a.number; c++) { b.eq(c).attr("title", c < a.hintList.length && a.hintList[c] !== null ? a.hintList[c] : c) } this.css("cursor", "pointer").removeData("readonly").removeAttr("title").children("input").attr("readonly", "readonly") } }; a.fn.raty = function (c) { if (b[c]) { return b[c].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof c === "object" || !c) { return b.init.apply(this, arguments) } else { a.error("Method " + c + " does not exist!") } }; a.fn.raty.defaults = { cancel: false, cancelHint: "cancel this rating!", cancelOff: "cancel-off.png", cancelOn: "cancel-on.png", cancelPlace: "left", click: undefined, half: false, halfShow: true, hintList: ["bad", "poor", "regular", "good", "gorgeous"], iconRange: undefined, noRatedMsg: "not rated yet", number: 5, path: "/images/", precision: false, round: { down: .25, full: .6, up: .76 }, readOnly: false, scoreName: "score", single: false, size: 16, space: true, starHalf: "star-half.png", starOff: "star-off.png", starOn: "star-on.png", start: 0, target: undefined, targetFormat: "{score}", targetKeep: false, targetText: "", targetType: "hint", width: undefined} })(jQuery)